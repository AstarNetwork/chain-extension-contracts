diff --git a/node_modules/@727-ventures/typechain-types/dist/src/query.d.ts b/node_modules/@727-ventures/typechain-types/dist/src/query.d.ts
index dc837a5..1c74218 100644
--- a/node_modules/@727-ventures/typechain-types/dist/src/query.d.ts
+++ b/node_modules/@727-ventures/typechain-types/dist/src/query.d.ts
@@ -1,12 +1,12 @@
 import type { ContractPromise } from "@polkadot/api-contract";
 import type { AnyJson } from '@polkadot/types-codec/types';
 import type { RequestArgumentType, GasLimitAndValue } from './types';
-import { Weight } from '@polkadot/types/interfaces';
+import { WeightV2 } from '@polkadot/types/interfaces';
 import { ApiPromise } from "@polkadot/api";
 type QueryReturnType<T> = {
     value: T;
-    gasConsumed: Weight;
-    gasRequired: Weight;
+    gasConsumed: WeightV2;
+    gasRequired: WeightV2;
 };
 export type { QueryReturnType, };
 export { _genValidGasLimitAndValue, };
@@ -25,8 +25,8 @@ export declare function queryOkJSON<T>(api: ApiPromise, nativeContract: Contract
  */
 export declare function queryOutput(api: ApiPromise, nativeContract: ContractPromise, callerAddress: string, title: string, args?: readonly RequestArgumentType[], gasLimitAndValue?: GasLimitAndValue): Promise<{
     output: import("@polkadot/types-codec/types").Codec;
-    gasConsumed: Weight;
-    gasRequired: Weight;
+    gasConsumed: WeightV2;
+    gasRequired: WeightV2;
 }>;
 declare function _genValidGasLimitAndValue(api: ApiPromise, gasLimitAndValue?: GasLimitAndValue): Promise<GasLimitAndValue>;
 export declare function handleReturnType(result: any, typeDescription: any): any;
diff --git a/node_modules/@727-ventures/typechain-types/dist/src/tx.d.ts b/node_modules/@727-ventures/typechain-types/dist/src/tx.d.ts
index 3189df7..ca1a978 100644
--- a/node_modules/@727-ventures/typechain-types/dist/src/tx.d.ts
+++ b/node_modules/@727-ventures/typechain-types/dist/src/tx.d.ts
@@ -1,6 +1,6 @@
 import type { ContractPromise } from "@polkadot/api-contract";
 import type { RequestArgumentType, GasLimitAndValue } from './types';
-import type { SubmittableExtrinsic } from '@polkadot/api/submittable/types';
+import type { SubmittableExtrinsic, SignerOptions } from '@polkadot/api/submittable/types';
 import type { KeyringPair } from '@polkadot/keyring/types';
 import type { Registry } from '@polkadot/types-codec/types';
 import type { ApiPromise, SubmittableResult } from "@polkadot/api";
@@ -21,14 +21,14 @@ type SignAndSendSuccessResponse = {
 export type { SignAndSendSuccessResponse, };
 export declare function txSignAndSend(nativeAPI: ApiPromise, nativeContract: ContractPromise, keyringPair: KeyringPair, title: string, eventHandler: (event: EventRecord[]) => {
     [index: string]: any;
-}, args?: readonly RequestArgumentType[], gasLimitAndValue?: GasLimitAndValue): Promise<SignAndSendSuccessResponse>;
+}, args?: readonly RequestArgumentType[], gasLimitAndValue?: GasLimitAndValue, signerOptions?: Partial<SignerOptions>): Promise<SignAndSendSuccessResponse>;
 export declare function buildSubmittableExtrinsic(api: ApiPromise, nativeContract: ContractPromise, title: string, args?: readonly RequestArgumentType[], gasLimitAndValue?: GasLimitAndValue): SubmittableExtrinsic<"promise", import("@polkadot/types/types").ISubmittableResult>;
 /**
  * (i) For reference, see:
  * 	- https://polkadot.js.org/docs/api/cookbook/tx#how-do-i-get-the-decoded-enum-for-an-extrinsicfailed-event
  * 	- `@redspot/patract/buildTx`
  */
-export declare function _signAndSend(registry: Registry, extrinsic: SubmittableExtrinsic<'promise'>, signer: KeyringPair, eventHandler: (event: EventRecord[]) => {
+export declare function _signAndSend(registry: Registry, extrinsic: SubmittableExtrinsic<'promise'>, signer: KeyringPair, eventHandler: (event: EventRecord[], signerOptions?: Partial<SignerOptions>) => {
     [index: string]: any;
 }): Promise<SignAndSendSuccessResponse>;
 //# sourceMappingURL=tx.d.ts.map
diff --git a/node_modules/@727-ventures/typechain-types/dist/src/tx.js b/node_modules/@727-ventures/typechain-types/dist/src/tx.js
index e15b609..1159ce3 100644
--- a/node_modules/@727-ventures/typechain-types/dist/src/tx.js
+++ b/node_modules/@727-ventures/typechain-types/dist/src/tx.js
@@ -67,7 +67,7 @@ var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
 Object.defineProperty(exports, "__esModule", { value: true });
 exports._signAndSend = exports.buildSubmittableExtrinsic = exports.txSignAndSend = void 0;
 var query_1 = require("./query");
-function txSignAndSend(nativeAPI, nativeContract, keyringPair, title, eventHandler, args, gasLimitAndValue) {
+function txSignAndSend(nativeAPI, nativeContract, keyringPair, title, eventHandler, args, gasLimitAndValue, signerOptions) {
     return __awaiter(this, void 0, void 0, function () {
         var _gasLimitAndValue, submittableExtrinsic;
         return __generator(this, function (_a) {
@@ -76,7 +76,7 @@ function txSignAndSend(nativeAPI, nativeContract, keyringPair, title, eventHandl
                 case 1:
                     _gasLimitAndValue = _a.sent();
                     submittableExtrinsic = buildSubmittableExtrinsic(nativeAPI, nativeContract, title, args, _gasLimitAndValue);
-                    return [2 /*return*/, _signAndSend(nativeAPI.registry, submittableExtrinsic, keyringPair, eventHandler)];
+                    return [2 /*return*/, _signAndSend(nativeAPI.registry, submittableExtrinsic, keyringPair, eventHandler, signerOptions)];
             }
         });
     });
@@ -101,7 +101,7 @@ exports.buildSubmittableExtrinsic = buildSubmittableExtrinsic;
  * 	- https://polkadot.js.org/docs/api/cookbook/tx#how-do-i-get-the-decoded-enum-for-an-extrinsicfailed-event
  * 	- `@redspot/patract/buildTx`
  */
-function _signAndSend(registry, extrinsic, signer, eventHandler) {
+function _signAndSend(registry, extrinsic, signer, eventHandler, signerOptions) {
     return __awaiter(this, void 0, void 0, function () {
         var signerAddress;
         return __generator(this, function (_a) {
@@ -112,47 +112,34 @@ function _signAndSend(registry, extrinsic, signer, eventHandler) {
                         txHash: extrinsic.hash.toHex(),
                     };
                     extrinsic
-                        .signAndSend(signer, function (result) {
+                        .signAndSend(signerOptions ? signerAddress : signer,
+                                     { nonce: -1, ...signerOptions },
+                                     function (result) {
                         if (result.status.isInBlock) {
                             actionStatus.blockHash = result.status.asInBlock.toHex();
                         }
-                        if (result.status.isFinalized || result.status.isInBlock) {
+                        if (result.status.isFinalized) {
                             actionStatus.events = eventHandler(result.events);
                             result.events
                                 .filter(function (_a) {
                                 var section = _a.event.section;
                                 return section === 'system';
-                            })
-                                .forEach(function (event) {
-                                var _a = event.event, data = _a.data, method = _a.method;
-                                if (method === 'ExtrinsicFailed') {
-                                    var dispatchError = data[0];
-                                    var message = dispatchError.type;
-                                    if (dispatchError.isModule) {
-                                        try {
-                                            var mod = dispatchError.asModule;
-                                            var error = registry.findMetaError(new Uint8Array([
-                                                mod.index.toNumber(),
-                                                mod.error.toNumber()
-                                            ]));
-                                            message = "".concat(error.section, ".").concat(error.name).concat(Array.isArray(error.docs)
-                                                ? "(".concat(error.docs.join(''), ")")
-                                                : error.docs || '');
-                                        }
-                                        catch (error) {
-                                            // swallow
-                                        }
-                                    }
+                            });
+                            if (!result.isError && !result.dispatchError) {
+                                actionStatus.result = result;
+                                resolve(actionStatus);
+                            } else {
+                                let message = 'Transaction failed';
+
+                                if (result.dispatchError?.isModule) {
+                                    const decoded = registry.findMetaError(result.dispatchError.asModule);
+                                    message = `${decoded?.section.toUpperCase()}.${decoded?.method}: ${decoded?.docs}`;
                                     actionStatus.error = {
                                         message: message,
                                     };
                                     reject(actionStatus);
                                 }
-                                else if (method === 'ExtrinsicSuccess') {
-                                    actionStatus.result = result;
-                                    resolve(actionStatus);
-                                }
-                            });
+                            }
                         }
                         else if (result.isError) {
                             actionStatus.error = {
diff --git a/node_modules/@727-ventures/typechain-types/dist/src/types.d.ts b/node_modules/@727-ventures/typechain-types/dist/src/types.d.ts
index b8ecb2c..510da5b 100644
--- a/node_modules/@727-ventures/typechain-types/dist/src/types.d.ts
+++ b/node_modules/@727-ventures/typechain-types/dist/src/types.d.ts
@@ -1,5 +1,5 @@
 import BN from 'bn.js';
-import type { ContractExecResultErr } from '@polkadot/types/interfaces/contracts/types';
+import type { DispatchError } from '@polkadot/types/interfaces/contracts/types';
 import type { AnyJson } from "@polkadot/types-codec/types";
 import { WeightV2 } from "@polkadot/types/interfaces";
 export type RequestArgumentType = number | string | boolean | bigint | (string | number)[] | BN | null | AnyJson | Object;
@@ -38,10 +38,10 @@ export type QueryCallError = MethodDoesntExistError | ErrorWithTexts & ({
 } | {
     issue: 'FAIL_AFTER_CALL::IS_ERROR';
     _resultIsOk: boolean;
-    _asError?: ContractExecResultErr;
+    _asError?: DispatchError;
 } | {
     issue: 'FAIL_AFTER_CALL::RESULT_NOT_OK';
-    _asError?: ContractExecResultErr;
+    _asError?: DispatchError;
 } | {
     issue: 'OUTPUT_IS_NULL';
 });
@@ -69,6 +69,7 @@ export declare class ReturnNumber {
     toString(): string;
     toHuman(): string;
     toNumber(): number;
+    toBigInt(): bigint;
     static ToBN(value: number | string): BN;
 }
 export interface ReturnedEvent {
diff --git a/node_modules/@727-ventures/typechain-types/dist/src/types.js b/node_modules/@727-ventures/typechain-types/dist/src/types.js
index 8c9f407..557964e 100644
--- a/node_modules/@727-ventures/typechain-types/dist/src/types.js
+++ b/node_modules/@727-ventures/typechain-types/dist/src/types.js
@@ -82,6 +82,9 @@ var ReturnNumber = /** @class */ (function () {
     ReturnNumber.prototype.toNumber = function () {
         return this.rawNumber.toNumber();
     };
+    ReturnNumber.prototype.toBigInt = function () {
+        return BigInt(this.toString());
+    }
     ReturnNumber.ToBN = function (value) {
         return new ReturnNumber(value).rawNumber;
     };